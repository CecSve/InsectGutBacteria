# Microbiome analysis

# Load required libraries
library(tidyverse)
library(reshape2)
library(vegan)
library(lme4)
library(data.table)
library(ggplot2); theme_set(theme_bw(base_size = 14))
library(stringr)
library(DESeq2)
library(phyloseq)
library(funrar)
library(ggrepel)
#library(MASS)

# set working directory
#setwd("H:/Documents/Speciale/New_DADA2_run_w_missing_samples")

# load data
data <-
  read.table(
    "cleaned-data/otus.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# load triplicate data with highest reads to be included in the analysis
trip_data <-
  read.table(
    "cleaned-data/triplicate_otus_filt.highest_readcount_otutable.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# load metadata
metadata <-
  read.table(
    "cleaned-data/metadata.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# load triplicate metadata
trip_metadata <-
  read.table(
    "cleaned-data/triplicate_metadata.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# select only the samples that are retained in the triplicate otu table
trip_metadata <-
  trip_metadata[(rownames(trip_metadata) %in% names(trip_data)),]
trip_metadata <-
  trip_metadata %>% rownames_to_column(var = "sample") %>% filter(!Stratum == "Eggs") %>% column_to_rownames(var = "sample") # remove eggs from the analysis

trip_data <-
  trip_data[, (names(trip_data) %in% rownames(trip_metadata))] # remove egg samples from otu data

# load split taxonmy
taxa <- 
  read.table(
    "cleaned-data/taxonomy_split.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# load string taxonomy
taxonomy <- 
  read.table(
    "cleaned-data/taxonomy_string.txt",
    sep = "",
    header = TRUE,
    row.names = 1
  ) 

# merge triplicate otutable with the other otutable
data <- rownames_to_column(data, var = "seqvars")
trip_data <- rownames_to_column(trip_data, var = "seqvars") 

comb_data <- left_join(data, trip_data, by = "seqvars") # mindful if there's not the same seqvars in both tables, then unmatching otus will get lost when left_joining 
comb_data <- column_to_rownames(comb_data, var = "seqvars")

# merge metadata with triplicate metadata
metadata <- rownames_to_column(metadata, var = "sample")
trip_metadata <- rownames_to_column(trip_metadata, var = "sample")

comb_metadata <- rbind(metadata, trip_metadata) 
# keep only gut samples for analysis
comb_metadata <- comb_metadata %>% filter(Stratum == "Gut")
comb_metadata <- column_to_rownames(comb_metadata, var = "sample")

data <- droplevels(comb_data)
metadata <- droplevels(comb_metadata)
taxonomy <- droplevels(taxonomy)

#save sampleIDs to subset data 
sampleIDs <- rownames(metadata)

# one outlier occurs in the mds, so that sample will be excluded
data <- data[, colnames(data) %in% sampleIDs]

data <- as.data.frame(data)
data[is.na(data)] <- 0 # NAs were introduced with triplicate samples and needs to be changed to zeros

# remove otus that only contain zeros
data <-
  data[apply(data[,-1], 1, function(x)
    ! all(x == 0)),] # remove rows that contain only zeros (OTUs that are not present in the subsetted samples)

egg_otus <- setdiff(rownames(comb_data), rownames(data)) # save the otus that were only present in eggs if you want to investigate further, e.g. their taxonomy
egg_taxonomy <- taxa %>% rownames_to_column(var = "seqvars") %>% filter(seqvars %in% egg_otus) %>% column_to_rownames(var = "seqvars")

occurences <-
  rownames(data) # save occurence IDs so they can be used to subset taxonomy

taxonomy <- taxonomy %>% rownames_to_column(var = "seqvars") %>% filter(seqvars %in% occurences) %>% column_to_rownames(var = "seqvars")
taxa <- taxa %>% rownames_to_column(var = "seqvars") %>% filter(seqvars %in% occurences) %>% column_to_rownames(var = "seqvars")

table(metadata$Species)

## ------- Analysis --------

# ---- DeSeq method ----
#Load data, taxnomy file and metadata into phyloseq formats
data_one <- data + 1
OTU <- otu_table(data_one, taxa_are_rows = T) # changed taxa_are_rows to true for phyloseq to work
sampledata <- sample_data(metadata)
taxa <- as.matrix(taxonomy) #Makes a dataframe
TAX <- tax_table(taxa)

#Create create phyloseq object named physeq
physeq <- phyloseq(OTU, sampledata, TAX)
physeq <- merge_phyloseq(physeq, metadata)

#Convert your phyloseq object to deseq2 object. ~ is the experimental design formula. Can be more complicated. 
diagdds = phyloseq_to_deseq2(physeq, ~ Diet) 
diagdds = DESeq(diagdds, test = "Wald", fitType = "local")
diagdds = estimateSizeFactors(diagdds)
diagdds = estimateDispersions(diagdds, fitType = "local")
diagvst = getVarianceStabilizedData(diagdds)

physeq0 = physeq #This keeps your original physeq object before normalization
otu_table(physeq) <- otu_table(diagvst, taxa_are_rows = TRUE) #Replaces your OTU data in physeq with normalised data.

#Creates a data.frame with normalised data so you don't need to use phyloseq.
norm.data = t(as(otu_table(physeq), "matrix")) # notice it is tranversed
dim(norm.data)
min(norm.data)
norm.data[norm.data<0] <- 0 # redundant since no cells are below 0, so set to 1 instead

rowSums(norm.data)
min(rowSums(norm.data))

#This command rarefies data to your lowest sampling depth, you can save this in phyloseq instead of the DeSeq2 data
rarified <- rarefy_even_depth(OTU, sample.size = min(sample_sums(OTU)), replace = FALSE, trimOTUs = FALSE, rngseed = 711) # set to 5000 but could be changed. Following samples were removed: S006 S026 S032 S046 and should be removed from metadata as well for richness analysis - now sat to min sample depth
rarefied.data = t(as(otu_table(rarified), "matrix")) 
rarefied.data <- t(rarefied.data)
rarefied.data <- as.data.frame(rarefied.data)

colSums(rarefied.data)
rowSums(rarefied.data) # both look right

############Convert data to relative abundances################# 
norm.data <- as.matrix(norm.data)
rel.data <- (make_relative(norm.data)*100)
dim(rel.data)

# ----- chris' method ----------
bray.data<-vegdist(rel.data, Type = "bray", binary = TRUE) # Creates a similarity matrix (Jaccard is the type), based on presence/absence
mds<-monoMDS(bray.data) # Performs multidimensional scaling for the data
plot(mds)

Nmds1<-mds$points[,1] #Extracts dimension 1 as a vector
Nmds2<-mds$points[,2] #Extracts dimension 2 as a vector

####Dimensions are the new variables, which are 'trends' in your data based on shared variation
####Dimension 1 explains the most shared variation of bacteria, dimension 2 the secondmost, then 3rd

Nmds=cbind(Nmds1,Nmds2) #Makes a new sheet with dimension1 and 2
Nmds<-as.data.frame(Nmds) #Creates a new dataframe with dimensions 1 and 2

sample.MDS <-ggplot(data=Nmds, aes(y=Nmds2, x=Nmds1, Type="p", colour = metadata$Stratum)) + 
  geom_point(size = 4) + labs(x="Dimension 1", y = "Dimension 2") + 
  theme(plot.title=element_text(hjust=0)) + stat_ellipse(colour = metadata$Stratum)
sample.MDS #Shows you our graph

# ----my method-----
bray.data<-vegdist(norm.data, Type = "bray", binary = TRUE) 
meta_mds <- metaMDS(bray.data)
plot(meta_mds)

class(meta_mds)
methods(class="metaMDS")

Y <- scores(meta_mds, display="sites")
plot(Y, type="n")
text(Y[,1], Y[,2], rownames(Y), col="red")

all(rownames(norm.data) == rownames(Y)) # make sure that rows of Y are in the same order as rows of norm.data
# data for samples with read count over 50 (33 samples)
Y.sel <- Y[rowSums(norm.data) > 50, ] # select ones with abundance over 50
plot(Y.sel[,1], Y.sel[,2], type="n", xlim=c(-.8, .8), ylim=c(-.4, .4))
text(Y.sel[,1], Y.sel[,2], rownames(Y.sel), col="red")

Y <- data.frame(Y)
Y$abundance <- rowSums(norm.data)
Y$labels <- metadata$Diet
Y$colour <- metadata$Species

# plot all samples
ggplot(Y, aes(x=NMDS1, y=NMDS2, colour = labels, group = colour)) +
  geom_point() + 
  theme_minimal() + scale_size_continuous(range = c(3,8)) + labs(title = "NMDS plot of normalised sample gut bacteria community composition by diet") + labs(colour = "Species") + geom_text_repel(aes(label=labels), show.legend = FALSE) + geom_line(colour = "lightgrey", size = 1, show.legend = F)

# plot samples with abundance over 50
ggplot(Y[Y$abundance > 50, ], aes(x=NMDS1, y=NMDS2, size=abundance, colour = colour)) +
  geom_point() + geom_text_repel(aes(label=labels), show.legend = FALSE) + 
  theme_minimal() + scale_size_continuous(range = c(3,8))

# support for nmds - not optmial for stats
envfit(meta_mds~metadata$SpecimenID)
envfit(meta_mds~metadata$Stratum)
envfit(meta_mds~metadata$Species)

# Adonis test
# This output tells us that our adonis test is significant so we can reject the null hypothesis that our two sampling methods have the same centroid.
adonis(bray.data ~ Stratum, strata = metadata$SpecimenID, data = metadata)

#test for all
#adonis(bray.data ~ Ecosystem + Species + Habitat + Diet + SpecimenID + Stratum, strata = metadata$SpecimenID, data = metadata)

# # Homogeneity of dispersion test - betadiversity
beta <- betadisper(bray.data, metadata$Stratum) # ## Calculate multivariate dispersions
plot(beta)
boxplot(beta) ## Draw a boxplot of the distances to centroid for each group
beta.HSD <- TukeyHSD(beta) ## Tukey's Honest Significant Differences
plot(beta.HSD)
anova(beta)
permutest(beta, permutations = 999) ## Permutation test for F
# our betadisper results are significant, meaning we cannot accept the null hypothesis that our groups have the same dispersions (homogeneity of dispersion among groups (specimenID in our case) is a condition (assumption) for adonis). This means we can be less confident that our adonis result is a real result, because heterogeneity in group dispersions is not clear


